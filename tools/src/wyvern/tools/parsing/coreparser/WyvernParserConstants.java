/* Generated By:JavaCC: Do not edit this line. WyvernParserConstants.java */
package wyvern.tools.parsing.coreparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WyvernParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VAL = 1;
  /** RegularExpression Id. */
  int VAR = 2;
  /** RegularExpression Id. */
  int DEF = 3;
  /** RegularExpression Id. */
  int TYPE = 4;
  /** RegularExpression Id. */
  int ASSERT = 5;
  /** RegularExpression Id. */
  int DATATYPE = 6;
  /** RegularExpression Id. */
  int CLASS = 7;
  /** RegularExpression Id. */
  int REC = 8;
  /** RegularExpression Id. */
  int FORWARD = 9;
  /** RegularExpression Id. */
  int TO = 10;
  /** RegularExpression Id. */
  int REQUIRE = 11;
  /** RegularExpression Id. */
  int METADATA = 12;
  /** RegularExpression Id. */
  int NEW = 13;
  /** RegularExpression Id. */
  int MODULE = 14;
  /** RegularExpression Id. */
  int COMPRISES = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int TAGGED = 17;
  /** RegularExpression Id. */
  int MATCH = 18;
  /** RegularExpression Id. */
  int IMPORT = 19;
  /** RegularExpression Id. */
  int LIFTED = 20;
  /** RegularExpression Id. */
  int DEFLT = 21;
  /** RegularExpression Id. */
  int RESOURCE = 22;
  /** RegularExpression Id. */
  int INSTANTIATE = 23;
  /** RegularExpression Id. */
  int AS = 24;
  /** RegularExpression Id. */
  int EFFECT = 25;
  /** RegularExpression Id. */
  int RECUR = 26;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 27;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 28;
  /** RegularExpression Id. */
  int WHITESPACE = 29;
  /** RegularExpression Id. */
  int NEWLINE = 30;
  /** RegularExpression Id. */
  int INDENT = 31;
  /** RegularExpression Id. */
  int DEDENT = 32;
  /** RegularExpression Id. */
  int DSLLINE = 33;
  /** RegularExpression Id. */
  int IDENTIFIER = 34;
  /** RegularExpression Id. */
  int LPAREN = 35;
  /** RegularExpression Id. */
  int RPAREN = 36;
  /** RegularExpression Id. */
  int TILDE = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int DASH = 39;
  /** RegularExpression Id. */
  int MULT = 40;
  /** RegularExpression Id. */
  int DIVIDE = 41;
  /** RegularExpression Id. */
  int MOD = 42;
  /** RegularExpression Id. */
  int EQUALS = 43;
  /** RegularExpression Id. */
  int EQUALSEQUALS = 44;
  /** RegularExpression Id. */
  int GE = 45;
  /** RegularExpression Id. */
  int LE = 46;
  /** RegularExpression Id. */
  int NOTEQUALS = 47;
  /** RegularExpression Id. */
  int COMMA = 48;
  /** RegularExpression Id. */
  int EQARROW = 49;
  /** RegularExpression Id. */
  int TARROW = 50;
  /** RegularExpression Id. */
  int DOT = 51;
  /** RegularExpression Id. */
  int COLON = 52;
  /** RegularExpression Id. */
  int POUND = 53;
  /** RegularExpression Id. */
  int QUESTION = 54;
  /** RegularExpression Id. */
  int BAR = 55;
  /** RegularExpression Id. */
  int AND = 56;
  /** RegularExpression Id. */
  int GT = 57;
  /** RegularExpression Id. */
  int LT = 58;
  /** RegularExpression Id. */
  int LBRACK = 59;
  /** RegularExpression Id. */
  int RBRACK = 60;
  /** RegularExpression Id. */
  int LBRACE = 61;
  /** RegularExpression Id. */
  int RBRACE = 62;
  /** RegularExpression Id. */
  int BOOLEANAND = 63;
  /** RegularExpression Id. */
  int BOOLEANOR = 64;
  /** RegularExpression Id. */
  int BOOLEANNOT = 65;
  /** RegularExpression Id. */
  int STRING_LITERAL = 66;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 67;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 68;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 69;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 70;
  /** RegularExpression Id. */
  int RATIONAL_LITERAL = 71;
  /** RegularExpression Id. */
  int DSL_LITERAL = 72;
  /** RegularExpression Id. */
  int ARROW = 73;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<WHITESPACE>",
    "\"val\"",
    "\"var\"",
    "\"def\"",
    "\"type\"",
    "\"assert\"",
    "\"datatype\"",
    "\"class\"",
    "\"rec\"",
    "\"forward\"",
    "\"to\"",
    "\"require\"",
    "\"metadata\"",
    "\"new\"",
    "\"module\"",
    "\"comprises\"",
    "\"extends\"",
    "\"tagged\"",
    "\"match\"",
    "\"import\"",
    "\"lifted\"",
    "\"default\"",
    "\"resource\"",
    "\"instantiate\"",
    "\"as\"",
    "\"effect\"",
    "\"recur\"",
    "<NEWLINE>",
    "<INDENT>",
    "<DEDENT>",
    "<DSLLINE>",
    "<IDENTIFIER>",
    "<LPAREN>",
    "<RPAREN>",
    "<TILDE>",
    "<PLUS>",
    "<DASH>",
    "<MULT>",
    "<DIVIDE>",
    "<MOD>",
    "<EQUALS>",
    "<EQUALSEQUALS>",
    "<GE>",
    "<LE>",
    "<NOTEQUALS>",
    "<COMMA>",
    "<EQARROW>",
    "<TARROW>",
    "<DOT>",
    "<COLON>",
    "<POUND>",
    "<QUESTION>",
    "<BAR>",
    "<AND>",
    "<GT>",
    "<LT>",
    "<LBRACK>",
    "<RBRACK>",
    "<LBRACE>",
    "<RBRACE>",
    "<BOOLEANAND>",
    "<BOOLEANOR>",
    "<BOOLEANNOT>",
    "<STRING_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "<RATIONAL_LITERAL>",
    "<DSL_LITERAL>",
    "<ARROW>",
  };

}
